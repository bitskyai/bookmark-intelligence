// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
  // clientOutput = "@prisma/client"
  // output       = "./pothos-types.ts"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Following is Table Schemas
model User {
  id                  Int                  @id @default(autoincrement())
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  username            String
  email               String?
  password            String?
  firstName           String?              @map("first_name")
  lastName            String?              @map("last_name")
  preference          Preference?
  system              System?
  seeds               Seed[]
  backups             Backup[]
  tags                Tag[]
  filters             Filter[]
  folders             Folder[]
  bookmarks           Bookmark[]
  bookmarkTags        BookmarkTag[]
  browserHistories    BrowserHistory[]
  bookmarkRaws        BookmarkRaw[]
  bookmarkScreenshots BookmarkScreenshot[]

  @@map("bk_user")
}

model Preference {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique @map("bk_user_id")
  apiKey    String   @unique @map("api_key")
  logLevel  String   @default("info") @map("log_level")
  logSize   Int      @default(52428800) @map("log_size") // 50MB

  @@map("bk_preference")
}

model System {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique @map("bk_user_id")

  @@map("bk_system")
}

model Seed {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("bk_user_id")
  seedName  String   @unique @map("seed_name")
  logs      String?

  @@map("bk_seed")
}

model Backup {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("bk_user_id")

  @@map("bk_backup")
}

// Tag: Store all the tag information
model Tag {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int           @map("bk_user_id")
  name         String
  bookmarkTags BookmarkTag[]
  version      Int           @default(0)

  @@unique([userId, name])
  @@map("bk_tag")
}

model Filter {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("bk_user_id")
  name      String   @unique
  icon      String?
  version   Int      @default(0)

  @@map("bk_filter")
}

model Folder {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int        @map("bk_user_id")
  parent    Folder?    @relation("ParentChildren", fields: [parentId], references: [id])
  parentId  Int?       @map("bk_parent_id")
  children  Folder[]   @relation("ParentChildren")
  name      String
  icon      String?
  bookmarks Bookmark[]
  version   Int        @default(0)

  @@map("bk_folder")
}

model Bookmark {
  id                  Int                  @id @default(autoincrement())
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int                  @map("bk_user_id")
  folder              Folder?              @relation(fields: [folderId], references: [id])
  folderId            Int?                 @unique @map("bk_folder_id")
  name                String
  description         String?
  icon                String?
  favorite            Boolean              @default(false)
  url                 String
  count               Int                  @default(0)
  bookmarkTags        BookmarkTag[]
  bookmarkRaws        BookmarkRaw[]
  bookmarkScreenshots BookmarkScreenshot[]
  content             String?
  version             Int                  @default(0)

  @@unique([userId, url])
  @@map("bk_bookmark")
}

model BookmarkRaw {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int                 @map("bk_user_id")
  bookmark           Bookmark            @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  bookmarkId         Int                 @map("bk_bookmark_id")
  bookmarkScreenshot BookmarkScreenshot?
  fileName           String              @map("file_name")
  version            Int                 @default(0)
  raw                String?

  @@unique([userId, fileName, version])
  @@map("bk_bookmark_raw")
}

model BookmarkScreenshot {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int         @map("bk_user_id")
  bookmark      Bookmark    @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  bookmarkId    Int         @map("bk_bookmark_id")
  bookmarkRaw   BookmarkRaw @relation(fields: [bookmarkRawId], references: [id], onDelete: Cascade)
  bookmarkRawId Int         @unique @map("bk_bookmark_raw_id")
  screenshot    String
  version       Int         @default(0)

  @@map("bk_bookmark_screenshot")
}

model BookmarkTag {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int      @map("bk_user_id")
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int      @map("bk_tag_id")
  bookmark   Bookmark @relation(fields: [bookmarkId], references: [id])
  bookmarkId Int      @map("bk_bookmark_id")
  version    Int      @default(0)

  @@unique([userId, tagId, bookmarkId])
  @@map("bk_bookmark_tag")
}

model BrowserHistory {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int      @map("bk_user_id")
  name        String
  description String?
  url         String
  icon        String?
  count       Int      @default(0)
  content     String?
  version     Int      @default(0)

  @@unique([userId, url])
  @@map("bk_browser_history")
}
