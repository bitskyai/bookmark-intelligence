// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
  // clientOutput = "@prisma/client"
  // output       = "./pothos-types.ts"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Following is Table Schemas
model User {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  username        String
  email           String?
  password        String?
  firstName       String?          @map("first_name")
  lastName        String?          @map("last_name")
  preference      Preference?
  system          System?
  seeds           Seed[]
  backups         Backup[]
  tags            Tag[]
  filters         Filter[]
  folders         Folder[]
  pages           Page[]
  pageMetadatas   PageMetadata[]
  pageTags        PageTag[]
  pageRaws        PageRaw[]
  pageScreenshots PageScreenshot[]
  IgnoreURL       IgnoreURL?
  Trash           Trash[]

  @@map("bk_user")
}

model Preference {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String      @unique @map("bk_user_id")
  apiKey         String      @unique @map("api_key")
  logLevel       String      @default("info") @map("log_level")
  logSize        Int         @default(52428800) @map("log_size") // 50MB
  indexFrequency Int         @default(60) @map("index_frequency") // 1 min
  ignoreURLs     IgnoreURL[]

  @@map("bk_preference")
}

model IgnoreURL {
  id                String      @id @default(uuid())
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String      @unique @map("bk_user_id")
  pattern           String      @unique @map("pattern")
  regularExpression Boolean     @default(false) @map("regular_expression")
  Preference        Preference? @relation(fields: [preferenceId], references: [id])
  preferenceId      String?

  @@map("bk_ignore_url")
}

model System {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @map("bk_user_id")

  @@map("bk_system")
}

model Seed {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("bk_user_id")
  seedName  String   @unique @map("seed_name")
  logs      String?

  @@map("bk_seed")
}

model Backup {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("bk_user_id")

  @@map("bk_backup")
}

// Tag: Store all the tag information
model Tag {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @map("bk_user_id")
  name      String
  pageTags  PageTag[]
  version   Int       @default(0)

  @@unique([userId, name])
  @@map("bk_tag")
}

model Filter {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("bk_user_id")
  name      String   @unique
  icon      String?
  version   Int      @default(0)

  @@map("bk_filter")
}

model Folder {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String         @map("bk_user_id")
  parent        Folder?        @relation("ParentChildren", fields: [parentId], references: [id])
  parentId      String?        @map("bk_parent_id")
  children      Folder[]       @relation("ParentChildren")
  name          String
  icon          String?
  version       Int            @default(0)
  PageMetadatas PageMetadata[]

  @@map("bk_folder")
}

model Page {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String           @map("bk_user_id")
  title           String
  description     String?
  icon            String?
  url             String
  content         String?
  version         Int              @default(0)
  pageMetadata    PageMetadata?
  pageTags        PageTag[]
  pageRaws        PageRaw[]
  pageScreenshots PageScreenshot[]

  @@unique([userId, url, version])
  @@map("bk_page")
}

model PageMetadata {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  lastVisitTime      DateTime? @map("last_visit_time")
  user               User      @relation(fields: [userId], references: [id])
  userId             String    @map("bk_user_id")
  folder             Folder?   @relation(fields: [folderId], references: [id])
  folderId           String?   @unique @map("bk_folder_id")
  page               Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId             String    @unique @map("bk_page_id")
  displayTitle       String?   @map("display_title")
  displayDescription String?   @map("display_description")
  localMode          Boolean   @default(false) @map("local_mode") // if you don't want to sync up cross devices
  favorite           Boolean   @default(false)
  bookmarked         Boolean   @default(false)
  incognito          Boolean   @default(false) // if you don't want to share the page in the default view
  tabId              Int?      @map("tab_id") // The ID of the tab that this page is contained within. Set to -1 if this page is not contained within a tab.
  visitCount         Int       @default(0) @map("visit_count") // The number of times the user has navigated to this page.
  typedCount         Int       @default(0) @map("typed_count") // The number of times the user has navigated to this page by typing in the address.
  hostName           String?   @map("host_name") // The hostname of this page.

  version Int @default(0)

  @@unique([userId, pageId, version])
  @@map("bk_page_meta_data")
}

model PageRaw {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String          @map("bk_user_id")
  page           Page            @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId         String          @map("bk_page_id")
  PageScreenshot PageScreenshot?
  fileName       String          @map("file_name")
  version        Int             @default(0)
  raw            String?

  @@unique([userId, fileName, version])
  @@map("bk_page_raw")
}

model PageScreenshot {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("bk_user_id")
  page       Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId     String   @map("bk_page_id")
  pageRaw    PageRaw  @relation(fields: [pageRawId], references: [id], onDelete: Cascade)
  pageRawId  String   @unique @map("bk_page_raw_id")
  screenshot String
  version    Int      @default(0)

  @@map("bk_page_screenshot")
}

model PageTag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("bk_user_id")
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String   @map("bk_tag_id")
  page      Page     @relation(fields: [pageId], references: [id])
  pageId    String   @map("bk_page_id")
  version   Int      @default(0)

  @@unique([userId, tagId, pageId])
  @@map("bk_page_tag")
}

model SearchEngineIndex {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  indexName   String   @map("index_name")
  lastIndexAt DateTime @map("last_index_at")
  version     Int      @default(0)

  @@unique([indexName])
  @@map("bk_search_engine_index")
}

// Trash: Store all the deleted information
model Trash {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("bk_user_id")
  version    Int      @default(0)
  tableName  String   @map("table_name")
  tableRowId String   @map("table_row_id")

  @@map("bk_trash")
}
